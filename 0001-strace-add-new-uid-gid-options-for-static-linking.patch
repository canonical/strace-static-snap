From f99dfcfaf4ba3dd8c14b83c6f2ade6ee712129ce Mon Sep 17 00:00:00 2001
From: Dilyn Corner <dilyn.corner@canonical.com>
Date: Wed, 6 Sep 2023 11:35:08 -0400
Subject: [PATCH] strace: add new --uid, --gid options for static linking When
 building strace statically linked using the "--username" argument will lead
 to strange errors. The reason is that the calls to getpwnam() and
 initgroups() will fail because glibc will still try to dlopen() the libnss
 modules which then fails in unexpected ways.

The `--username` argument is only needed for uid,gid and
supplementary groups setup. So this commit provides a way
to pass uid,gid via the commandline and it will not init
supplementary groups (but it could be extended for this).

This does allow to use a statically linked strace.

Signed-off-by: Michael Vogt <michael.vogt@canonical.com>
Signed-off-by: Dilyn Corner <dilyn.corner@canonical.com>
---
 src/strace.c | 30 +++++++++++++++++++++++++++---
 1 file changed, 27 insertions(+), 3 deletions(-)

diff --git a/src/strace.c b/src/strace.c
index 5752177b7..2bcecb881 100644
--- a/src/strace.c
+++ b/src/strace.c
@@ -149,6 +149,8 @@ static int strace_child;
 static int strace_tracer_pid;
 
 static const char *username;
+static int cmdline_uid = -1;
+static int cmdline_gid = -1;
 static uid_t run_uid;
 static gid_t run_gid;
 
@@ -1498,8 +1500,11 @@ exec_or_die(void)
 		 * It is important to set groups before we
 		 * lose privileges on setuid.
 		 */
-		if (initgroups(username, run_gid) < 0) {
-			perror_msg_and_die("initgroups");
+		// TODO: provide a way to pass "setgroups()" data to avoid
+		// the initgroups() that requires libnss
+		if (cmdline_uid == -1 && cmdline_gid == -1)  {
+			if (initgroups(username, run_gid) < 0)
+				perror_msg_and_die("initgroups");
 		}
 		if (setregid(run_gid, params->run_egid) < 0) {
 			perror_msg_and_die("setregid");
@@ -2272,6 +2277,8 @@ init(int argc, char *argv[])
 		GETOPT_TS,
 		GETOPT_TIPS,
 		GETOPT_ARGV0,
+		GETOPT_UID,
+		GETOPT_GID,
 
 		GETOPT_QUAL_TRACE,
 		GETOPT_QUAL_TRACE_FD,
@@ -2321,6 +2328,8 @@ init(int argc, char *argv[])
 		{ "timestamps",		optional_argument, 0, GETOPT_TS },
 		{ "syscall-times",	optional_argument, 0, 'T' },
 		{ "user",		required_argument, 0, 'u' },
+		{ "uid",		required_argument, 0, GETOPT_UID },
+		{ "gid",		required_argument, 0, GETOPT_GID },
 		{ "summary-columns",	required_argument, 0, 'U' },
 		{ "no-abbrev",		no_argument,	   0, 'v' },
 		{ "version",		no_argument,	   0, 'V' },
@@ -2524,6 +2533,18 @@ init(int argc, char *argv[])
 		case 'x':
 			xflag = MIN(xflag + 1, HEXSTR_ALL);
 			break;
+                case GETOPT_UID:
+                        i = string_to_uint(optarg);
+                        if (i < 0)
+                           error_opt_arg(c, lopt, optarg);
+                        cmdline_uid = i;
+			break;
+                case GETOPT_GID:
+                        i = string_to_uint(optarg);
+                        if (i < 0)
+                           error_opt_arg(c, lopt, optarg);
+                        cmdline_gid = i;
+			break;
 		case GETOPT_HEX_STR:
 			xflag_long = find_arg_val(optarg, xflag_str,
 						  HEXSTR_ALL, -1);
@@ -2839,7 +2860,10 @@ init(int argc, char *argv[])
 #endif
 
 	/* See if they want to run as another user. */
-	if (username != NULL) {
+        if (username != NULL && cmdline_uid > -1 && cmdline_gid > -1) {
+                run_uid = cmdline_uid;
+                run_gid = cmdline_gid;
+        } else if (username != NULL) {
 		struct passwd *pent;
 
 		if (getuid() != 0 || geteuid() != 0) {
-- 
2.39.2

